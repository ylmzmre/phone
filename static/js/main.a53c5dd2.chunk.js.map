{"version":3,"sources":["config/Config.js","components/Form.js","components/Loading.js","components/List.js","components/Contacts.js","components/App.js","serviceWorker.js","index.js"],"names":["DB_CONFIG","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Form","props","state","name","phone","onChange","bind","onSubmit","e","this","setState","target","value","preventDefault","addContact","className","type","id","placeholder","Component","Loading","role","style","lineHeight","List","filterText","onChangeFilter","filteredContacts","contacts","filter","item","undefined","toLowerCase","indexOf","toLocaleLowerCase","length","map","index","key","Contacts","App","app","firebase","database","ref","child","on","snap","push","val","contact","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a53c5dd2.chunk.js","sourcesContent":["export const DB_CONFIG = {\n  apiKey: \"AIzaSyBvihyQtLrtMLs26CxjMJPugNjgOEDeQGs\",\n  authDomain: \"phonedirectory-ece2c.firebaseapp.com\",\n  databaseURL: \"https://phonedirectory-ece2c.firebaseio.com\",\n  projectId: \"phonedirectory-ece2c\",\n  storageBucket: \"phonedirectory-ece2c.appspot.com\",\n  messagingSenderId: \"1002900120973\",\n  appId: \"1:1002900120973:web:66bd0eed7ed3b0b2b409c4\",\n  measurementId: \"G-RCC12S9F67\"\n};\n","import React, { Component } from \"react\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      phone: \"\"\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n    this.props.addContact({\n      ...this.state\n    });\n    this.setState({\n        name: '',\n        phone: ''\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ekleme Formu</h1>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              id=\"name\"\n              name=\"name\"\n              placeholder=\"Ad Soyad\"\n              value={this.state.name}\n              onChange={this.onChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              id=\"phone\"\n              name=\"phone\"\n              placeholder=\"Telefon Numarası\"\n              value={this.state.phone}\n              onChange={this.onChange}\n            />\n          </div>\n          <button className=\"btn btn-primary btn-sm\">Kaydet</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Form;\n","import React from \"react\";\n\nconst Loading = () => {\n  return (\n    <div className=\"d-flex justify-content-center my-5\">\n      <div className=\"spinner-grow spinner-grow-sm text-primary\" role=\"status\"/>\n      <div\n        className=\"spinner-grow spinner-grow-sm text-primary\"\n        role=\"status\"\n      />\n      <div\n        className=\"spinner-grow spinner-grow-sm text-primary\"\n        role=\"status\"\n      />\n      <strong style={{lineHeight: \"1\"}}>Yükleniyor</strong>\n      <div\n        className=\"spinner-grow spinner-grow-sm text-primary\"\n        role=\"status\"\n      />\n      <div\n        className=\"spinner-grow spinner-grow-sm text-primary\"\n        role=\"status\"\n      />\n      <div\n        className=\"spinner-grow spinner-grow-sm text-primary\"\n        role=\"status\"\n      />\n    </div>\n  );\n};\n\nexport default Loading;\n","import React, { Component } from \"react\";\nimport Loading from \"./Loading\";\n\nclass List extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filterText: \"\"\n    };\n    this.onChangeFilter = this.onChangeFilter.bind(this);\n  }\n\n  onChangeFilter(e) {\n    this.setState({\n      filterText: e.target.value\n    });\n  }\n  render() {\n    const filteredContacts = this.props.contacts.filter(item => {\n      if (item.name !== undefined || item.phone !== undefined) {\n        return (\n          item.name\n            .toLowerCase()\n            .indexOf(this.state.filterText.toLocaleLowerCase()) !== -1\n        );\n      }\n      return null;\n    });\n    return (\n      <div>\n        <h1>İletişim</h1>\n        <div className=\"form-group\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"filter\"\n            name=\"filter\"\n            placeholder=\"Arama\"\n            value={this.state.filterText}\n            onChange={this.onChangeFilter}\n          />\n          <div className=\"my-2\"></div>\n          {filteredContacts.length === 0 ? <Loading /> : null}\n          <ul className=\"list-group\">\n            {filteredContacts.map((item, index) => {\n              return (\n                <li\n                  className=\"list-group-item d-flex justify-content-between align-items-center list-group-item-action\"\n                  key={index}\n                >\n                  {item.name}\n                  <span className=\"badge badge-info\">{item.phone}</span>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default List;\n","import React, { Component } from \"react\";\n\nimport Form from \"./Form\";\nimport List from \"./List\";\n\nclass Contacts extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-md-6 col-sm-3\">\n            <Form addContact={this.props.addContact}></Form>\n          </div>\n          <div className=\"col-md-6 col-sm-3\">\n            <List contacts={this.props.contacts}></List>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Contacts;\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as firebase from \"firebase\";\nimport { DB_CONFIG } from \"../config/Config\";\n\nimport Contacts from \"./Contacts\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      contacts: []\n    };\n    this.addContact = this.addContact.bind(this);\n\n    this.app = firebase.initializeApp(DB_CONFIG);\n    this.database = this.app.database().ref().child(\"contacts\");\n  }\n\n  componentWillMount() {\n    const { contacts } = this.state;\n\n    this.database.on(\"child_added\", snap => {\n      contacts.push({\n        name: snap.val().name,\n        phone: snap.val().phone\n      });\n      this.setState({\n        contacts: contacts\n      });\n    });\n  }\n\n  addContact(contact) {\n    this.database.push({ name: contact.name, phone: contact.phone });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header></header>\n        <Contacts contacts={this.state.contacts} addContact={this.addContact} />\n        <footer></footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}